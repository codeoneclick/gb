// autogenerated: do not add any changes
#ifndef material_configuration_h
#define material_configuration_h
#include "configuration.h"
#include "shader_configuration.h"
#include "texture_configuration.h"
namespace gb
{
class material_configuration : public configuration
{
public:
material_configuration(void) = default;
~material_configuration(void) = default;
std::string get_render_technique_name(void) const;
#if defined(__EDITOR__)
void set_render_technique_name(std::string render_operation_name);
#endif
bool get_depth_test(void) const;
#if defined(__EDITOR__)
void set_depth_test(bool is_depth_test);
#endif
bool get_depth_mask(void) const;
#if defined(__EDITOR__)
void set_depth_mask(bool is_depth_mask);
#endif
bool get_culling(void) const;
#if defined(__EDITOR__)
void set_culling(bool is_cull_face);
#endif
GLenum get_culling_mode(void) const;
#if defined(__EDITOR__)
void set_culling_mode(GLenum cull_face_mode);
#endif
bool get_blending(void) const;
#if defined(__EDITOR__)
void set_blending(bool is_blending);
#endif
GLenum get_blending_function_source(void) const;
#if defined(__EDITOR__)
void set_blending_function_source(GLenum blending_function_source);
#endif
GLenum get_blending_function_destination(void) const;
#if defined(__EDITOR__)
void set_blending_function_destination(GLenum blending_function_destination);
#endif
bool get_clipping(void) const;
#if defined(__EDITOR__)
void set_clipping(bool is_cliping);
#endif
f32 get_clipping_x(void) const;
#if defined(__EDITOR__)
void set_clipping_x(f32 clipping_x);
#endif
f32 get_clipping_y(void) const;
#if defined(__EDITOR__)
void set_clipping_y(f32 clipping_y);
#endif
f32 get_clipping_z(void) const;
#if defined(__EDITOR__)
void set_clipping_z(f32 clipping_z);
#endif
f32 get_clipping_w(void) const;
#if defined(__EDITOR__)
void set_clipping_w(f32 clipping_w);
#endif
bool get_reflecting(void) const;
#if defined(__EDITOR__)
void set_reflecting(bool is_reflecting);
#endif
bool get_shadowing(void) const;
#if defined(__EDITOR__)
void set_shadowing(bool is_shadowing);
#endif
bool get_debugging(void) const;
#if defined(__EDITOR__)
void set_debugging(bool is_debugging);
#endif
std::shared_ptr<shader_configuration> get_shader_configuration(void) const;
#if defined(__EDITOR__)
void set_shader_configuration(const std::shared_ptr<gb::shader_configuration>& shader);
#endif
std::vector<std::shared_ptr<configuration>> get_textures_configurations(void) const;
#if defined(__EDITOR__)
void add_textures_configurations(const std::shared_ptr<gb::texture_configuration>& texture);
#endif
#if defined(__EDITOR__)
void set_textures_configurations(const std::shared_ptr<gb::texture_configuration>& texture, i32 index);
#endif
void serialize(const std::string& filename);
#if defined(__EDITOR__)
void deserialize(const std::string& filename);
#endif
};
};
#endif
