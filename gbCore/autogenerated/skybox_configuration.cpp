// autogenerated: do not add any changes
#include "skybox_configuration.h"
namespace gb
{
i32 skybox_configuration::get_z_order(void) const
{
const auto& iterator = m_attributes.find("/skybox/z_order");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void skybox_configuration::set_z_order(i32 z_order)
{
configuration::set_attribute("/skybox/z_order", std::make_shared<configuration_attribute>(z_order));
}
#endif
std::vector<std::shared_ptr<configuration>> skybox_configuration::get_materials_configurations(void) const
{
const auto& iterator = m_configurations.find("/skybox/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void skybox_configuration::add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/skybox/materials/material", material);
}
#endif
#if defined(__EDITOR__)
void skybox_configuration::set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index)
{
configuration::set_configuration("/skybox/materials/material", material, index);
}
#endif
void skybox_configuration::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml_document(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/skybox");
i32 z_order = node.node().attribute("z_order").as_int();
configuration::set_attribute("/skybox/z_order", std::make_shared<configuration_attribute>(z_order));
pugi::xpath_node_set material_nodes = document.select_nodes("/skybox/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
material->serialize((*iterator).node().attribute("filename").as_string());
configuration::set_configuration("/skybox/materials/material", material);
}
}
#if defined(__EDITOR__)
void skybox_configuration::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("skybox");
pugi::xml_node parent_node = node;
pugi::xml_attribute attribute;
attribute = node.append_attribute("z_order");
i32 z_order = skybox_configuration::get_z_order();
attribute.set_value(z_order);
node = parent_node.append_child("materials");
for(const auto& iterator : skybox_configuration::get_materials_configurations())
{
std::shared_ptr<gb::material_configuration> configuration = std::static_pointer_cast<gb::material_configuration>(iterator);
pugi::xml_node child_node = node.append_child("material");
attribute = child_node.append_attribute("filename");
attribute.set_value(configuration->get_filename().c_str());
}
document.save_file(filename.c_str());
}
#endif
}
